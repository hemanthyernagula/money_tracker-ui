/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/QmTYZTqeT8X
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

import { useEffect, useState, useRef } from "react"
import apiManager from "../utils/apiManager";
import Link from "next/link"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Checkbox } from "@/components/ui/checkbox"
import { ResponsiveLine } from "@nivo/line"
import { ResponsivePie } from "@nivo/pie"


export function money_track() {
  const CURRENCY_SYMBOL = "â‚¹";
  
  const [isTransactionsModelOpen, setisTransactionsModelOpen] = useState(false);

  const [cardData, setCardData] = useState<any[]>([]);
  const [totalIncome, setTotalIncome] = useState(0)
  const [all_transactions, setAllTransactions] = useState<any[]>([]);
  const [transactionData, setTransactionData] = useState({
    date: "",
    description: "",
    amount: "",
    category: "",
    isRecurring: false,
    monthsToRepeat: "",
  });

  

  const handleTransactionInputChange = (e) => {
    const { id, value, type, checked } = e.target;
    setTransactionData(prev => ({
      ...prev,
      [id]: type === "checkbox" ? checked : value
    }));
  };


  const handleTransactionSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await apiManager.addTransaction({
        ...transactionData,
        amount: parseFloat(transactionData.amount),
        monthsToRepeat: transactionData.isRecurring ? parseInt(transactionData.monthsToRepeat) : undefined,
      });
      if (response.status) {
        console.log("Transaction added successfully");
        // Reset form or show success message
        setTransactionData({
          date: "",
          description: "",
          amount: "",
          category: "",
          isRecurring: false,
          monthsToRepeat: "",
        });
      } else {
        console.error("Failed to add transaction:", response.message);
        // Show error message to user
      }
    } catch (error) {
      console.error("Error adding transaction:", error);
      // Show error message to user
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const incomeResponse = await apiManager.getIncomes();
        const cardResponse = await apiManager.getCardData();
        const transactionsResponse = await apiManager.allTransaction({});
        
  
        if (incomeResponse.status) {
          const totalIncome = incomeResponse.data.reduce((sum, income) => sum + income.amount, 0);
          setTotalIncome(totalIncome);
        }
  
        if (cardResponse.status) {
          console.log("card response", cardResponse.data);
          setCardData(cardResponse.data);
        }

        if (transactionsResponse.status) {
          console.log("transactions response", transactionsResponse.data);
          setAllTransactions(transactionsResponse.data);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
  
    fetchData();
  }, []);

  const [savingGoal, setSavingGoal] = useState({
    item: "",
    targetAmount: 0,
    currentSavings: 0,
    monthsRemaining: 0,
  })

  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Here you can handle the file upload logic
      console.log('File selected:', file.name);
      // You would typically send this file to your server or process it client-side
      // For example: apiManager.uploadTransactionFile(file);
      const response = await apiManager.uploadTransactions(file);
      console.log("response", response);
    }
  };

  const triggerFileUpload = () => {
    console.log("triggering file upload");
    fileInputRef.current?.click();
  };

  const handleSavingGoalChange = (field, value) => {
    setSavingGoal((prev) => ({
      ...prev,
      [field]: value,
    }))
  }
  const calculateMonthsRemaining = () => {
    const { targetAmount, currentSavings, monthlyIncome, monthlyExpenses } = savingGoal
    const monthlySavings = monthlyIncome - monthlyExpenses
    const remainingAmount = targetAmount - currentSavings
    return Math.ceil(remainingAmount / monthlySavings)
  }
  const handleSubmit = (e) => {
    e.preventDefault()
    const monthsRemaining = calculateMonthsRemaining()
    setSavingGoal((prev) => ({
      ...prev,
      monthsRemaining,
    }))
  }

  const [categorySearch, setCategorySearch] = useState("")
  const categories = [
    { value: "food", label: "Food" },
    { value: "housing", label: "Housing" },
    { value: "utilities", label: "Utilities" },
    { value: "transportation", label: "Transportation" },
    { value: "lifestyle", label: "Lifestyle" },
    { value: "other", label: "Other" },
  ]

  const filteredCategories = categories.filter(category =>
    category.label.toLowerCase().includes(categorySearch.toLowerCase())
  )

  return (
    <div className="flex min-h-screen w-full flex-col bg-background">
      <header className="sticky top-0 z-30 flex h-16 items-center border-b bg-background px-6 shadow-sm">
        <div className="flex items-center gap-4">
          <Link href="#" className="flex items-center gap-2 text-lg font-semibold" prefetch={false}>
            <Package2Icon className="h-6 w-6" />
            <span>Finance Tracker</span>
          </Link>
        </div>
        <div className="ml-auto flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="rounded-full">
                <img
                  src="/placeholder.svg"
                  width="32"
                  height="32"
                  className="rounded-full"
                  alt="Avatar"
                  style={{ aspectRatio: "32/32", objectFit: "cover" }}
                />
                <span className="sr-only">Toggle user menu</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>My Account</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Settings</DropdownMenuItem>
              <DropdownMenuItem>Support</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Logout</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-6 md:gap-8 md:p-10">
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
         
          {cardData.map((card, index) => (
            <Card key={index}>
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium">{card.title}</CardTitle>
                {/* {card.icon} */}
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {card.title === "Recurring Transactions" ? "" : CURRENCY_SYMBOL}{" "}
                  {typeof card.content.value === "number" ? card.content.value.toFixed(2) : card.content.value}
                </div>
                <p className="text-xs text-muted-foreground">{card.content.subtext}</p>
              </CardContent>
            </Card>
          ))}
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Spending Trends</CardTitle>
              <div className="flex items-center gap-2">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" size="icon">
                      <FilterIcon className="h-4 w-4" />
                      <span className="sr-only">Filter</span>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[300px] rounded-md border bg-background p-2 shadow-md" align="end">
                    <div className="grid gap-2">
                      <div className="grid grid-cols-2 items-center gap-2">
                        <Label htmlFor="dateFrom">From</Label>
                        <Input type="date" id="dateFrom" />
                      </div>
                      <div className="grid grid-cols-2 items-center gap-2">
                        <Label htmlFor="dateTo">To</Label>
                        <Input type="date" id="dateTo" />
                      </div>
                      <div>
                        <Label className="mb-2 block text-sm font-medium">Categories</Label>
                        <div className="relative">
                          <Input
                            type="text"
                            placeholder="Search categories..."
                            className="mb-2 w-full rounded-md border bg-background px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                          />
                          <div className="flex flex-wrap gap-2">
                            <div className="cursor-pointer rounded-full bg-primary px-3 py-1 text-sm text-primary-foreground relative group">
                              Food
                              <button className="absolute top-0 right-0 -translate-x-1/2 -translate-y-1/2 bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100">
                                <XIcon className="w-3 h-3" />
                              </button>
                            </div>
                            <div className="cursor-pointer rounded-full bg-primary px-3 py-1 text-sm text-primary-foreground relative group">
                              Housing
                              <button className="absolute top-0 right-0 -translate-x-1/2 -translate-y-1/2 bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100">
                                <XIcon className="w-3 h-3" />
                              </button>
                            </div>
                            <div className="cursor-pointer rounded-full bg-primary px-3 py-1 text-sm text-primary-foreground relative group">
                              Utilities
                              <button className="absolute top-0 right-0 -translate-x-1/2 -translate-y-1/2 bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100">
                                <XIcon className="w-3 h-3" />
                              </button>
                            </div>
                            <div className="cursor-pointer rounded-full bg-primary px-3 py-1 text-sm text-primary-foreground relative group">
                              Transportation
                              <button className="absolute top-0 right-0 -translate-x-1/2 -translate-y-1/2 bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100">
                                <XIcon className="w-3 h-3" />
                              </button>
                            </div>
                            <div className="cursor-pointer rounded-full bg-primary px-3 py-1 text-sm text-primary-foreground relative group">
                              Lifestyle
                            </div>
                            <div className="cursor-pointer rounded-full bg-primary px-3 py-1 text-sm text-primary-foreground relative group">
                              Other
                              <button className="absolute top-0 right-0 -translate-x-1/2 -translate-y-1/2 bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100">
                                <XIcon className="w-3 h-3" />
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 items-center gap-2">
                        <Label htmlFor="amountFilter">Amount</Label>
                        <Select id="amountFilter">
                          <SelectTrigger>
                            <SelectValue placeholder="Select filter" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="less">Less than</SelectItem>
                            <SelectItem value="greater">Greater than</SelectItem>
                            <SelectItem value="equal">Equal to</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <Input type="number" id="amountValue" placeholder="Enter amount" />
                      <Button type="submit" className="justify-self-end">
                        Apply Filters
                      </Button>
                    </div>
                  </DropdownMenuContent>
                </DropdownMenu>
                <LineChartIcon className="h-4 w-4 text-muted-foreground" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                <div className="grid grid-cols-2 gap-4">
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between pb-2">
                      <CardTitle className="text-sm font-medium">Monthly Spending</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <LineChart className="w-full aspect-[4/3]" />
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between pb-2">
                      <CardTitle className="text-sm font-medium">Spending by Category</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <PieChart className="w-full aspect-[4/3]" />
                    </CardContent>
                  </Card>
                </div>
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-sm font-medium">Spending Timeline</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <TimeseriesChart className="w-full aspect-[4/3]" />
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Recurring Transactions</CardTitle>
              <RepeatIcon className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Frequency</TableHead>
                    <TableHead>Months Remaining</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  <TableRow>
                    <TableCell>Rent</TableCell>
                    <TableCell>Housing</TableCell>
                    <TableCell>{CURRENCY_SYMBOL} 1,500.00</TableCell>
                    <TableCell>Monthly</TableCell>
                    <TableCell>10</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>Electricity</TableCell>
                    <TableCell>Utilities</TableCell>
                    <TableCell>{CURRENCY_SYMBOL} 150.00</TableCell>
                    <TableCell>Monthly</TableCell>
                    <TableCell>2</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>Internet</TableCell>
                    <TableCell>Utilities</TableCell>
                    <TableCell>{CURRENCY_SYMBOL} 75.00</TableCell>
                    <TableCell>Monthly</TableCell>
                    <TableCell>5</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>Gym Membership</TableCell>
                    <TableCell>Lifestyle</TableCell>
                    <TableCell>{CURRENCY_SYMBOL} 99.00</TableCell>
                    <TableCell>Monthly</TableCell>
                    <TableCell>8</TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </CardContent>
          </Card>
          <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Recent Transactions</CardTitle>
            <ListIcon 
              className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-black transition-colors duration-200" 
              onClick={() => setisTransactionsModelOpen(true)}
            />
          </CardHeader>
          <CardContent>
            <div className="max-h-[300px] overflow-auto">
              <Table>
                <TableHeader className="sticky top-0 bg-background z-10">
                  <TableRow>
                    <TableHead>Date</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Category</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {all_transactions.map((transaction, index) => (
                    <TableRow key={index}>
                      <TableCell>{transaction.date}</TableCell>
                      <TableCell>{transaction.description}</TableCell>
                      <TableCell>{CURRENCY_SYMBOL} {transaction.amount.toFixed(2)}</TableCell>
                      <TableCell>{transaction.category}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
        </div>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Add Transaction</CardTitle>
              <input type="file" ref={fileInputRef} onChange={handleFileUpload} accept=".html,.csv,.xlsx" style={{ display: 'none' }}/>
              <UploadIcon onClick={triggerFileUpload} className="h-4 w-4 text-muted-foreground cursor-pointer hover:text-black transition-colors duration-200" />
            </CardHeader>
            <CardContent>
            <form onSubmit={handleTransactionSubmit}>
          <div className="grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="date">Date</Label>
              <Input 
                type="date" 
                id="date" 
                value={transactionData.date}
                onChange={handleTransactionInputChange}
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="description">Description</Label>
              <textarea
                id="description"
                placeholder="Enter transaction description"
                className="w-full p-2 border rounded-md"
                rows={3}
                value={transactionData.description}
                onChange={handleTransactionInputChange}
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="amount">Amount</Label>
              <Input 
                type="number" 
                id="amount" 
                value={transactionData.amount}
                onChange={handleTransactionInputChange}
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="category">Category</Label>
              <Select 
                id="category"
                value={transactionData.category}
                onValueChange={(value) => setTransactionData(prev => ({ ...prev, category: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a category" />
                </SelectTrigger>
                <SelectContent>
                  <div className="p-2">
                    <Input
                      placeholder="Search categories..."
                      value={categorySearch}
                      onChange={(e) => setCategorySearch(e.target.value)}
                      className="mb-2"
                    />
                  </div>
                  {filteredCategories.map((category) => (
                    <SelectItem key={category.value} value={category.value}>
                      {category.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="isRecurring">Recurring</Label>
              <Checkbox 
                id="isRecurring" 
                checked={transactionData.isRecurring}
                onCheckedChange={(checked) => setTransactionData(prev => ({ ...prev, isRecurring: checked }))}
              />
              {transactionData.isRecurring && (
                <div className="grid gap-2">
                  <Label htmlFor="monthsToRepeat">Months to Repeat</Label>
                  <Input 
                    type="number" 
                    id="monthsToRepeat" 
                    value={transactionData.monthsToRepeat}
                    onChange={handleTransactionInputChange}
                  />
                </div>
              )}
            </div>
            <Button type="submit" className="justify-self-end">
              Add Transaction
            </Button>
                </div>
              </form>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Saving Goals</CardTitle>
              <RepeatIcon className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit}>
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="item">Item</Label>
                    <Input
                      type="text"
                      id="item"
                      value={savingGoal.item}
                      onChange={(e) => handleSavingGoalChange("item", e.target.value)}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="targetAmount">Target Amount</Label>
                    <Input
                      type="number"
                      id="targetAmount"
                      value={savingGoal.targetAmount}
                      onChange={(e) => handleSavingGoalChange("targetAmount", Number(e.target.value))}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="currentSavings">Current Savings</Label>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        id="currentSavings"
                        value={savingGoal.currentSavings}
                        onChange={(e) => handleSavingGoalChange("currentSavings", Number(e.target.value))}
                      />
                      <Button size="sm" variant="secondary">
                        Get Savings
                      </Button>
                    </div>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="monthlyExpenses">Monthly Expenses</Label>
                    <Input
                      type="number"
                      id="monthlyExpenses"
                      value={savingGoal.monthlyExpenses}
                      onChange={(e) => handleSavingGoalChange("monthlyExpenses", Number(e.target.value))}
                    />
                  </div>
                  <Button
                    type="submit"
                    onClick={() => {
                      const { item, targetAmount, currentSavings, monthlyExpenses } = savingGoal
                      const monthsRemaining = calculateMonthsRemaining()
                      setSavingGoal((prev) => [...prev, { item, targetAmount, currentSavings, monthsRemaining }])
                    }}
                  >
                    Add Saving Goal
                  </Button>
                  {savingGoal.length > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Item</TableHead>
                          <TableHead>Target Amount</TableHead>
                          <TableHead>Current Savings</TableHead>
                          <TableHead>Months Remaining</TableHead>
                          <TableHead>Priority</TableHead>
                          <TableHead>Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {savingGoal.map((goal, index) => (
                          <TableRow key={index}>
                            <TableCell>{goal.item}</TableCell>
                            <TableCell>{CURRENCY_SYMBOL} {goal.targetAmount.toFixed(2)}</TableCell>
                            <TableCell>{CURRENCY_SYMBOL} {goal.currentSavings.toFixed(2)}</TableCell>
                            <TableCell>{goal.monthsRemaining}</TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Button size="icon" variant="ghost" onClick={() => moveSavingGoalUp(index)}>
                                  <ArrowUpIcon className="h-4 w-4" />
                                </Button>
                                <Button size="icon" variant="ghost" onClick={() => moveSavingGoalDown(index)}>
                                  <ArrowDownIcon className="h-4 w-4" />
                                </Button>
                              </div>
                            </TableCell>
                            <TableCell>
                              <Button size="icon" variant="ghost" onClick={() => removeSavingGoal(index)}>
                                <TrashIcon className="h-4 w-4" />
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  ) : (
                    <div className="text-center text-muted-foreground">No saving goals found.</div>
                  )}
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}

function ArrowDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 5v14" />
      <path d="m19 12-7 7-7-7" />
    </svg>
  )
}


function ArrowUpIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m5 12 7-7 7 7" />
      <path d="M12 19V5" />
    </svg>
  )
}


function DollarSignIcon(props) {
  return (
    "â‚¹"
  )
}


function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}


function LineChart(props) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "Jan", y: 43 },
              { x: "Feb", y: 137 },
              { x: "Mar", y: 61 },
              { x: "Apr", y: 145 },
              { x: "May", y: 26 },
              { x: "Jun", y: 154 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "Jan", y: 60 },
              { x: "Feb", y: 48 },
              { x: "Mar", y: 177 },
              { x: "Apr", y: 78 },
              { x: "May", y: 96 },
              { x: "Jun", y: 204 },
            ],
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{
          type: "point",
        }}
        yScale={{
          type: "linear",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}


function LineChartIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 3v18h18" />
      <path d="m19 9-5 5-4-4-3 3" />
    </svg>
  )
}


function ListIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="8" x2="21" y1="6" y2="6" />
      <line x1="8" x2="21" y1="12" y2="12" />
      <line x1="8" x2="21" y1="18" y2="18" />
      <line x1="3" x2="3.01" y1="6" y2="6" />
      <line x1="3" x2="3.01" y1="12" y2="12" />
      <line x1="3" x2="3.01" y1="18" y2="18" />
    </svg>
  )
}


function Package2Icon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z" />
      <path d="m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9" />
      <path d="M12 3v6" />
    </svg>
  )
}


function PieChart(props) {
  return (
    <div {...props}>
      <ResponsivePie
        data={[
          { id: "Jan", value: 111 },
          { id: "Feb", value: 157 },
          { id: "Mar", value: 129 },
          { id: "Apr", value: 150 },
          { id: "May", value: 119 },
          { id: "Jun", value: 72 },
        ]}
        sortByValue
        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}
        cornerRadius={0}
        padAngle={0}
        borderWidth={1}
        borderColor={"#ffffff"}
        enableArcLinkLabels={false}
        arcLabel={(d) => `CURRENCY_SYMBOL{d.id}`}
        arcLabelsTextColor={"#ffffff"}
        arcLabelsRadiusOffset={0.65}
        colors={["#2563eb"]}
        theme={{
          labels: {
            text: {
              fontSize: "18px",
            },
          },
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}

function UploadIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" y1="3" x2="12" y2="15" />
    </svg>
  )
}



function RepeatIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m17 2 4 4-4 4" />
      <path d="M3 11v-1a4 4 0 0 1 4-4h14" />
      <path d="m7 22-4-4 4-4" />
      <path d="M21 13v1a4 4 0 0 1-4 4H3" />
    </svg>
  )
}


function TimeseriesChart(props) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "2018-01-01", y: 7 },
              { x: "2018-01-02", y: 5 },
              { x: "2018-01-03", y: 11 },
              { x: "2018-01-04", y: 9 },
              { x: "2018-01-05", y: 12 },
              { x: "2018-01-06", y: 16 },
              { x: "2018-01-07", y: 13 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "2018-01-01", y: 9 },
              { x: "2018-01-02", y: 8 },
              { x: "2018-01-03", y: 13 },
              { x: "2018-01-04", y: 6 },
              { x: "2018-01-05", y: 8 },
              { x: "2018-01-06", y: 14 },
              { x: "2018-01-07", y: 11 },
            ],
          },
        ]}
        margin={{ top: 10, right: 20, bottom: 40, left: 40 }}
        xScale={{
          type: "time",
          format: "%Y-%m-%d",
          useUTC: false,
          precision: "day",
        }}
        xFormat="time:%Y-%m-%d"
        yScale={{
          type: "linear",
          min: 0,
          max: "auto",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
          format: "%d",
          tickValues: "every 1 day",
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}


function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}


function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
